plugins {
    id 'java'
    id 'io.quarkus'
    id 'rain.check.backend.java-application-conventions'
    id 'jacoco'
    id 'checkstyle'
}

repositories {
    mavenCentral()
    mavenLocal()
}

group 'rain.check.backend.app'
version '1.0-SNAPSHOT'

ext {
    lombokVersion = "1.18.30"
}

dependencies {
    implementation 'io.quarkus:quarkus-rest-client-jackson'

    implementation 'org.apache.commons:commons-text'
    implementation enforcedPlatform("${quarkusPlatformGroupId}:${quarkusPlatformArtifactId}:${quarkusPlatformVersion}")
    implementation "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"

    testImplementation 'io.quarkus:quarkus-junit5'

    // PERSISTENCE DEPENDENCIES
    // Hibernate ORM specific dependencies
    implementation("io.quarkus:quarkus-hibernate-orm-panache")
    // JDBC driver dependencies
    implementation("io.quarkus:quarkus-jdbc-postgresql")
    // Liquibase specific dependencies
    implementation("io.quarkus:quarkus-liquibase")
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

test {
    systemProperty "java.util.logging.manager", "org.jboss.logmanager.LogManager"
    finalizedBy jacocoTestReport // report is always generated after tests run
}

compileJava {
    options.encoding = 'UTF-8'
    options.compilerArgs << '-parameters'
}

compileTestJava {
    options.encoding = 'UTF-8'
}

quarkusDev {
    doFirst {
        System.setProperty("debug", "5015") // APP1 debug port
    }
}

// ------------------------ JACOCO DEFINITIONS -----------------------------------------------------

jacoco {
    toolVersion = "0.8.11"
    reportsDirectory = layout.buildDirectory.dir("reports/jacoco")
}

jacocoTestReport {
    reports {
        xml.required = false
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('jacoco')
    }
    dependsOn test // tests are required to run before generating the report
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.8
            }
        }
    }
}

// ------------------------ CHECKSTYLE -----------------------------------------------------

tasks.compileJava.dependsOn ':rain-check-b4f:compileQuarkusGeneratedSourcesJava'